//Question 1
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

void insert_beginning(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = head;
    head = newNode;
}

void insert_end(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        return;
    }

    struct Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}



void display() {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    insert_end(10);
    insert_end(20);
    insert_beginning(5);

    display();

    return 0;
}

#Question2
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;


struct Node* create_node(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


void insert_end(int data) {
    struct Node* newNode = create_node(data);

    if (head == NULL) {
        head = newNode;
        return;
    }

    struct Node* temp = head;
    while (temp->next != NULL)
        temp = temp->next;
    
    temp->next = newNode;
}


void insert_middle(int data) {
    if (head == NULL) {
        head = create_node(data);
        return;
    }

   
    int length = 0;
    struct Node* temp = head;
    while (temp != NULL) {
        length++;
        temp = temp->next;
    }

   
    int mid = length / 2;

    temp = head;
    for (int i = 0; i < mid - 1; i++)
        temp = temp->next;

    struct Node* newNode = create_node(data);
    newNode->next = temp->next;
    temp->next = newNode;
}


void display() {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    insert_end(10);
    insert_end(20);
    insert_end(30);
    insert_end(40);

    printf("Before inserting in middle:\n");
    display();

    insert_middle(99);

    printf("After inserting in middle:\n");
    display();

    return 0;
}

#Question 3
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void display(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

struct Node* deleteNode(struct Node* head, int key) {
    struct Node* temp = head;
    struct Node* prev = NULL;

    // Case 1: If the head node itself has the key
    if (temp != NULL && temp->data == key) {
        head = temp->next; // Change head
        free(temp); // Free memory
        return head;
    }

    // Case 2: Search for the key
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    // If key not found
    if (temp == NULL) return head;

    // Unlink the node
    prev->next = temp->next;
    free(temp);
    return head;
}

int main() {
    // Creating nodes
    struct Node* head = malloc(sizeof(struct Node));
    struct Node* second = malloc(sizeof(struct Node));
    struct Node* third = malloc(sizeof(struct Node));

    head->data = 10; head->next = second;
    second->data = 20; second->next = third;
    third->data = 30; third->next = NULL;

    printf("Original List: ");
    display(head);

    head = deleteNode(head, 20); // Delete node with value 20

    printf("After Deletion: ");
    display(head);

    return 0;
}

#Question 4
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void search(struct Node* head, int key) {
    int position = 0;
    struct Node* temp = head;

    while (temp != NULL) {
        if (temp->data == key) {
            printf("Element %d found at position %d.\n", key, position);
            return;
        }
        temp = temp->next;
        position++;
    }
    printf("Element %d not found.\n", key);
}

int main() {
    struct Node* head = malloc(sizeof(struct Node));
    struct Node* second = malloc(sizeof(struct Node));
    struct Node* third = malloc(sizeof(struct Node));

    head->data = 10;  head->next = second;
    second->data = 20; second->next = third;
    third->data = 30; third->next = NULL;

    int key;
    printf("Enter element to search: ");
    scanf("%d", &key);

    search(head, key);

    return 0;
}

#Question 5
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};


int search(struct Node* head, int key) {
    struct Node* temp = head;
    while (temp != NULL) {
        if (temp->data == key)
            return 1;  
        temp = temp->next;
    }
    return 0; 
}

int main() {
    int n, i, key;
    struct Node *head = NULL, *temp = NULL, *newNode;

    printf("Enter number of nodes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        newNode = (struct Node*)malloc(sizeof(struct Node));
        printf("Enter data for node %d: ", i+1);
        scanf("%d", &newNode->data);
        newNode->next = NULL;

        if (head == NULL)
            head = newNode;
        else
            temp->next = newNode;
        temp = newNode;
    }

  
    printf("Enter key to search: ");
    scanf("%d", &key);

    if (search(head, key))
        printf("Key %d is present in the linked list.\n", key);
    else
        printf("Key %d is NOT present in the linked list.\n", key);

    return 0;
}

#Question 6
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

int detectLoop(struct Node* head) {
    struct Node *slow = head, *fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;        
        fast = fast->next->next;  

        if (slow == fast) 
            return 1;
    }
    return 0; 
}

struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    return node;
}

int main() {

    struct Node* head = newNode(10);
    head->next = newNode(20);
    head->next->next = newNode(30);
    head->next->next->next = newNode(40);


    head->next->next->next->next = head->next; 

    if (detectLoop(head))
        printf("Loop detected in linked list.\n");
    else
        printf("No loop in linked list.\n");

    return 0;
}

#Question 7
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void removeLoop(struct Node* head) {
    struct Node *slow = head, *fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;

        if (slow == fast) {
            break;
        }
    }

    if (fast == NULL || fast->next == NULL)
        return;

    slow = head;
    while (slow->next != fast->next) {
        slow = slow->next;
        fast = fast->next;
    }


    fast->next = NULL;
}

struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    return node;
}

void printList(struct Node* head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {

    struct Node* head = newNode(10);
    head->next = newNode(20);
    head->next->next = newNode(30);
    head->next->next->next = newNode(40);

    head->next->next->next->next = head->next;
    removeLoop(head);

    printf("Linked List after removing loop:\n");
    printList(head);

    return 0;
}

#Question 8
class Solution:
    def reverseList(self, head):
        prev = None
        current = head
        
        while current is not None:
            next_node = current.next 
            current.next = prev      
            prev = current            
            current = next_node       
        
        return prev  

#Question 9


